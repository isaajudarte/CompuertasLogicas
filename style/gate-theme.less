@import "_variables";

@remSize: 16px;

@background: #FFF3E0;
@borderColor: #FFA000;
@inactiveColor: #E0E0E0;
@inactiveHoverColor: #B3E5FC;
@activeColor: #FFC107;
@activeHoverColor: #FFB300;

@transitionDuration: @easing @duration;

@borderThickness: 2px / @remSize * 1rem;
@border: @borderThickness solid @borderColor;

@valueSize: 3rem + 2 * @borderThickness;	// El tamaño de un cuadro de entrada o salida. Agregue un grosor de borde en cada lado que se cubrirá con los conectores adyacentes.
@connectorThickness: .5rem;					
@connectorCenterOffset: .5 * @connectorThickness + @borderThickness;	

@gateWidth: 4rem;							
@gateConcaveRadius: @gateWidth * .9;		
@gateInputOffset: 1rem;						// La distancia desde el borde de la puerta hasta el centro del conector de entrada. Debe coincidir con las coordenadas declaradas en el HTML.
@gateConcaveY: -@gateConcaveRadius * 1.8;	
@gateConcaveX: @gateWidth / 2 - @gateConcaveRadius;

@gateConcaveCenterY: -@gateConcaveY - @gateConcaveRadius;				
@gateConnectorNearOffset: @gateInputOffset - @connectorCenterOffset;	
@gateConnectorFarOffset: @gateInputOffset + @connectorCenterOffset;		

@gateOffset: sqrt(pow(@gateConcaveRadius, 2)
				- pow(@gateWidth / 2 - @gateConnectorNearOffset, 2))
	- @gateConcaveCenterY;

// Aplica un valor en la escala actual.
// Esto se utiliza para establecer el tamaño REM base
// y para solucionar un error de IE con REM
// valores en alturas de línea para :after.
.scaleValue(@property, @value) {
	@{property}: unit(@value) * @remSize;
	@media (max-width: 640px), (max-height: 700px) {
		@{property}: 8px * unit(@value);
	}
}

:root {
	.scaleValue(font-size, 1);
	box-sizing: border-box;
}

.square(@size) {
	width: @size;
	height: @size;
}

// Dibuja un valor enmarcado (entrada o resultado calculado).
// El llamador debe extender .ActiveValueBox cuando está activo.
.ValueBox() {
	display: block;
	.square(@valueSize);
	box-sizing: border-box;
	background-color: @inactiveColor;
	border: @border;
	transition+: background @transitionDuration;

	position: relative;
	overflow: hidden;

	&:after {
		
		margin-left: -@borderThickness;
		margin-top: -@borderThickness;

		white-space: pre;
		content: '0\00000a1';
		font-size: 2rem;
		display: block;
		.square(@valueSize);
		.scaleValue(line-height, @valueSize);
		text-align: center;
		position: absolute;
		top: 0;
		transition: top @transitionDuration;
	}
}


.GateCircle() {
	.square(2 * @gateConcaveRadius);
	display: block;
	border-radius: 50%;
	position: absolute;
}

.ColorizeConnectors(@color) {
	+ div > .Connector {
		&, &:before {
			background-color: @color;
		}
	}
}

.Connectors.InactiveHover	{ .ColorizeConnectors(@inactiveHoverColor);	}
.Connectors.Active			{ .ColorizeConnectors(@activeColor);		}
.Connectors.ActiveHover		{ .ColorizeConnectors(@activeHoverColor);	}

// Applies active styles to a .ValueBox() element
.ActiveValueBox {
	background-color: @activeColor;
	&:after {
		top: -@valueSize;
	}
}

.Canvas input[type=checkbox] {
	// Oculte la casilla de verificación (pero asegúrese de que aún se pueda enfocar) y dibuje
	// la etiqueta posterior en su lugar, ya que solo Chrome permite :after en
	// las casillas de verificación. Para preservar el comportamiento de desplazamiento cuando se enfoca, el <input>
	// debe ubicarse explícitamente en la misma ubicación que la etiqueta.
	opacity: 0;

	+ label {
		.square(@valueSize);
		margin: -@borderThickness;
		padding: 0;
		cursor: pointer;
		transition+: box-shadow @transitionDuration;
		.ValueBox();

		&:hover {
			background-color: @inactiveHoverColor;
			&:extend(.Connectors.InactiveHover all);
		}
	}

	&:checked + label {
		&:extend(.ActiveValueBox all);
		&:extend(.Connectors.Active all);
		&:hover {
			background-color: @activeHoverColor;
			&:extend(.Connectors.ActiveHover all);
		}
	}

	&:focus + label {
		box-shadow: 0 0 5px 2px #E65100;
	}
}

.Canvas {
	@padding: 1rem;
	position: relative;

	
	overflow: visible;
	margin: @padding;
	&:before {
		content: '';
		display: block;
		background-color: @background;
		border: @borderThickness solid #FFB74D;
		position: absolute;
		top: -@padding;
		left: -@padding;
		right: -@padding;
		bottom: -@padding;
	}

	> *, > .Group > * {
		position: absolute !important;	// relative from checkboxes
	}
	> .Group {
		position: static !important;
	}
}

// Una línea que conecta cuadros de valores o combinadores.
// Estas líneas se disponen en atributos de estilo,
// como si la línea tuviera un grosor cero. Por lo tanto,
// la posición (superior o izquierda) establece el centro de
// la línea.
.Connector {
	background: @inactiveColor;
	transition: background @transitionDuration;
	z-index: 1;	 

	
	&.Corner:before {
		content: '';
		display: block;
		position: absolute;

		.square(@connectorThickness);
		transition: inherit;
		
		background-color: @inactiveColor;
	}

	&.Vertical {
		width: @connectorThickness;
		margin-left: -@connectorCenterOffset;

		border-left: @border;
		border-right: @border;
		
		&.Corner:before {
			top: -@connectorCenterOffset;	
			left: -@borderThickness;		
			border-top: @border;
		}

		&.Corner.Left:before {
			border-right: @border;
			padding-left: @borderThickness;	
		}

		&.Corner.Right:before {
			border-left: @border;
			padding-right: @borderThickness;
		}

		&.Corner.Bottom:before {
			top: auto;
			bottom: -@connectorCenterOffset;	
			left: -@borderThickness;			
			border-bottom: @border;
			border-top: none;
		}

		&.Convex {
			overflow: hidden;
			background: none !important;	
			border: none;
			padding: 0 @borderThickness;	
			height: 1rem;	// Debe ser al menos tan alto como la parte visible del círculo.


			&:before {
				content: '';
				.GateCircle();
				background-color: @inactiveColor;
				transition: inherit;

				margin: 0 @connectorCenterOffset;	
				top: @gateConcaveY - @gateOffset;
			}
			&.Left:before {
				left: @gateConcaveX - @gateInputOffset;
			}
			&.Right:before {
				right: @gateConcaveX - @gateInputOffset;
			}

			&:after {
				content: '';
				display: block;
				position: absolute;
				width: @gateWidth / 2 - @gateConnectorFarOffset;
				width: @gateConnectorFarOffset;

				height: sqrt(pow(@gateConcaveRadius, 2)
						   - pow(@gateWidth / 2 - @gateConnectorFarOffset, 2))
					 - (-@gateConcaveY + @gateOffset - @gateConcaveRadius)
					 - @borderThickness * .15;	// Resta un píxel para que el borde cercano del borde no se extienda más allá de la curva
			}
			&.Left:after {
				right: 0;
				border-right: @border;
			}
			&.Right:after {
				left: 0;
				border-left: @border;
			}
		}

		&.Junction.Top:before {
			content: '';
			display: block;
			background: @inactiveColor;
			transition: inherit;
			position: absolute;
			top: 0;
			right: -@borderThickness;		
			width: @connectorThickness + 2 * @borderThickness;
			height: @connectorThickness / 2;	
		}
	}

	&.Horizontal {
		
		height: @connectorThickness;
		margin-top: -@connectorCenterOffset;
		
		border-top: @border;
		border-bottom: @border;
		
		&.Corner.Left:before {
			left: -@connectorCenterOffset;	
			top: -@borderThickness;			
			border-left: @border;
		}

		&.Corner.Right:before {
			right: -@connectorCenterOffset; 
			top: -@borderThickness;			
			border-right: @border;
		}

		&.Corner.Up:before {
			border-bottom: @border;
			padding-top: @borderThickness;
		}

		&.Corner.Down:before {
			border-top: @border;
			padding-bottom: @borderThickness;
		}

		&.Junction.Right:before {
			content: '';
			display: block;
			background: @inactiveColor;
			transition: inherit;
			position: absolute;
			right: 0;
			top: -@borderThickness;			
			width: @connectorThickness / 2;
			height: @connectorThickness + 2 * @borderThickness;
		}
	}
}

.Result {
	border-radius: @valueSize / 2;
	margin: -@borderThickness;
	.ValueBox();
}

.ActiveGate.OR, .ActiveGate.XOR {
	span:before, &:after {
		background-color: @activeColor;
	}
}
.ActiveGate.AND {
	background-color: @activeColor;
}
.ActiveGate.Result {
	+ div > .Result {
		&:extend(.ActiveValueBox all);
	}
}

.GateLabel() {
	font-size: 1.4rem;
	text-align: center;
}

.OrGate(@baseStraightHeight) {

	@formalTipHeight: 3rem;			
	@tipRadius: @gateWidth;

	@straightHeight: @baseStraightHeight + @gateOffset
		+ (@formalTipHeight - sqrt(
			pow(@gateWidth, 2)
		  - pow(@gateWidth / 2 + @connectorThickness / 2, 2)));

	position: relative;
	width: @gateWidth;
	height: @straightHeight + @tipRadius;
	z-index: 0;
	margin-top: -@gateOffset;
	overflow: hidden;

	&:after {
		content: '';
		display: block;
		height: @straightHeight;
		background-color: @inactiveColor;
		border-left: @border;
		border-right: @border;
		transition: background @transitionDuration;

		.GateLabel();
		.scaleValue(line-height, @straightHeight + @tipRadius * .75);
		position: relative;
		z-index: 1;	// Cover the :before
	}
	// The concave curve on the top is implemented
	// as a large circle with the background color
	// to cover the top part of the straight part.
	&:before {
		content: '';
		.BlockingGateCircle();
		top: @gateConcaveY;
		z-index: 2;	// Cover the :after
	}
	.BlockingGateCircle() {
		.GateCircle();
		left: @gateConcaveX;
		box-sizing: border-box;
		background-color: @background;
		border: @border;
	}

	// Para que la curva inferior termine en un ángulo,
	// hago dos curvas que cubren todo el
	// ancho del elemento y corto la mitad de
	// cada una para que se junten en el medio.
	span {
		display: block;
		position: absolute;
		top: @straightHeight;
		height: @tipRadius;
		width: @gateWidth / 2;
		overflow: hidden;

		&:before {
			content: '';
			display: block;
			background-color: @inactiveColor;
			border-bottom: @border;
			position: absolute;
			height: @tipRadius;
			width: @gateWidth;
			transition: background @transitionDuration;
		}
	}

	span:first-child {
		left: 0;

		&:before {
			border-left: @border;
			border-bottom-left-radius: @tipRadius;
		}
	}

	span + span {
		right: 0;

		&:before {
			right: 0;
			border-right: @border;
			border-bottom-right-radius: @tipRadius;
		}
	}
}

.Gate.OR {
	.OrGate(1rem);
	&:after {
		content: 'OR';
	}
}

.Gate.XOR {
	@curveGap: .75rem; 
	@straightHeight: 2rem - @curveGap;
	.OrGate(@straightHeight + @curveGap);

	&:after {
		margin-top: @curveGap;
		height: @straightHeight + @gateOffset;
		content: 'XOR';
		.scaleValue(line-height, @straightHeight + @tipRadius * .56);
	}

	// El círculo original de .OrGate() ahora es la curva superior
	// y está alineado con los conectores entrantes
	&:before {
		z-index: 3;	
	}

	div {
		.BlockingGateCircle();
		top: @gateConcaveY + @curveGap;
		z-index: 2;	
	}
}

.Gate.AND {
	width: @gateWidth;
	height: 5rem;
	margin: -@borderThickness;	
	border-radius: 0 0 @gateWidth @gateWidth;
	background: @inactiveColor;
	border: @border;
	transition: background @transitionDuration;

	&:after {
		display: block;
		content: 'AND';
		.scaleValue(line-height, 5rem - @gateWidth / 5);
		.GateLabel();
	}
}
